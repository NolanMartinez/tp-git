
Ouvrir un terminal (terminal Git Bash à privilégier)

Créer, en ligne de commande, un répertoire tp-git
Mkdir tp-git

Se déplacer dans le répertoire
cd tp-git

Vérifier qu'on est dans le bon répertoire en affichant le chemin du répertoire courant
pwd

Initialiser un dépôt Git

git init

Lister tous les fichiers du répertoire (y compris les fichiers cachés) pour s'assurer que le répertoire .git à été créé

ls -a

Ouvrir ce répertoire sous VS Code

Exécuter git status et copier/coller la sortie

On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)

Créer le fichier fichier1.md avec un contenu quelconque et l'enregistrer (vous pouvez utiliser VS Code pour créer et éditer des fichiers)

Attention, il s'agit bien de créer un nouveau fichier, et non un répertoire. Il en sera de même tout au long de ce TP.
Créer le fichier fichier2.md avec un contenu quelconque et l'enregistrer

Exécuter git status et copier/coller la sortie

On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        fichier1.md.txt
        fichier2.md.txt

nothing added to commit but untracked files present (use "git add" to track)

Ajouter fichier1.md à l'index de Git (zone de Staging)

git add fichier1.md

Exécuter git status et copier/coller la sortie

On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   fichier1.md.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        fichier2.md.txt


Créer un commit avec pour message : "Ajout de fichier1.md"

$ git commit -m "ajout de fichier1.md"
[master (root-commit) 6288541] ajout de fichier1.md
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 fichier1.md.txt


VALIDATION PROF01

Exécuter git status et copier/coller la sortie

$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        fichier2.md.txt

nothing added to commit but untracked files present (use "git add" to track)


Modifier fichier1.md et enregistrer

Exécuter git status et copier/coller la sortie

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   fichier1.md.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        fichier2.md.txt

no changes added to commit (use "git add" and/or "git commit -a")


Ajouter fichier1.md et fichier2.md à la zone de Staging

git add fichier1.md

git add fichier2.md

Créer un commit "Ajout de fichier2.md et modification de fichier1.md"

git commit -m "ajout de fichier2.md et modification de fichier1.md"


Exécuter git status et copier/coller la sortie

$ git status
On branch master
nothing to commit, working tree clean


Copier/coller l'ID des deux premiers commits (utiliser log) :

ID commit 1 : commit ca8a795de0681588e3b2a390185c9737808bd655
ID commit 2 : commit 62885412d6cfceb1fc76445c30271184c1feea42

Que signifie qu'un fichier est "tracked" ou "untracked" ?

un fichier tracked est un fichier qui a étais ajouté à l'index et un fichier untracked non

Pourquoi doit-on passer les fichiers par la zone de Staging (l'index) avant de les committer ?

Elle permet de choisir les modifications qui feront parti du commit et pouvoir avoir un "historique du fichier"

Partie 2

Créer une branche fonctionnalite1

git branch fonctionnalite1


Lister les branches

$ git branch
  fonctionnalite1
* master


Se déplacer sur la branche fonctionnalite1

git checkout fonctionnalite1

Lister les branches

$ git branch
* fonctionnalite1
  master


Que représente l'étoile à côté des noms des branches ?

C'est la branche sur laquelle on est située

Créer un nouveau fichier fichier3.md



Modifier le fichier fichier2.md

Comment utiliser VS Code pour qu'il nous montre les différences entre l'ancienne version de fichier2.md et la version courante que l'on vient d'éditer ?
Committer ces deux modifications : "Fonctionnalité 1 - première phase"

Créer un nouveau fichier fichier4.md

Modifier de nouveau le fichier fichier2.md

Committer ces deux modifications : "Fonctionnalité 1 - terminée"

VALIDATION PROF03

Afficher la liste des fichiers du répertoire

Se déplacer sur la branche master

Afficher la liste des fichiers du répertoire

Pourquoi les deux sorties sont-elles différentes ? Les fichiers ont-ils disparus ?

Créer une nouvelle branche fonctionnalite2

Cette branche ne va pas avoir toutes les données incluses dans fonctionnalite1. Pourquoi ?
Qu'aurait-il fallu faire si on avait souhaité démarrer la branche fonctionnalite2 en intégrant les modifications récentes de fonctionnalite1 ?
Se déplacer sur la nouvelle branche fonctionnalite2

Créer un nouveau fichier fichier5.md

Faire un commit intégrant cette ajout : "Ajout fichier5.md"

Entrer la commande git log --oneline --decorate --graph --all pour visualiser, sur le terminal, le graphe des commits sur toutes les branches

Noter la « déviation » entre les deux branches, à partir de la branche master (schématisée sous forme de traits)
l'option --all permet de visualiser toutes les branches, pas seulement celle sur laquelle on est
l'option --oneline affiche les commits sur une seule ligne
l'option --graph affiche le log sous forme de graphe
(utilisez si besoin les touches haut/bas pour naviguer dans la sortie de cette commande et Q pour quitter)
Installer l'extension VS Code Git Graph et visualiser le graphe actuel des commits à l'aide de cette extension

Sur cette représentation, que représente les points ?
Comment voit-on sur quelle branche on est actuellement ?